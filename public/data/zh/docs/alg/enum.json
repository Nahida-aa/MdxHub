{
  "locale": "zh",
  "type": "docs",
  "url": "/zh/docs/alg/enum",
  "slug": "alg/enum",
  "segments": [
    "alg",
    "enum"
  ],
  "filePath": "docs/zh/alg/enum/index.mdx",
  "meta": {
    "title": "穷举法",
    "description": "这是一个非常好的起点！暴力枚举是解决算法问题的基础方法之一，尤其是在解空间有限的情况下。虽然暴力枚举通常不是最优解，但它是理解问题和验证复杂算法的关键工具。",
    "created_at": "2025-03-22T16:40:54.000Z",
    "updated_at": "2025-03-22T16:40:54.000Z",
    "tags": [
      "alg",
      "enum"
    ]
  },
  "order": 99,
  "content": "\n以下是关于**如何学习暴力枚举**的详细指导：\n\n## 什么是暴力枚举？\n\n暴力枚举（Brute Force）是一种**穷举法**，即尝试所有可能的解，逐一验证每个解是否满足问题的条件。它的核心思想是：\n1. **生成所有可能的解**。\n2. **逐一验证每个解是否满足条件**。\n3. **返回满足条件的解（或最优解）**。\n\n## 学习暴力枚举的步骤\n\n### **理解问题的解空间**\n- 解空间是指问题所有可能解的集合。\n- 在暴力枚举中，你需要明确解空间的大小，以及如何生成所有可能的解。\n\n**示例**：\n- 如果问题是“从数组 `[1, 2, 3]{:py}` 中选择两个数”，解空间是所有可能的数对：`(1, 2), (1, 3), (2, 3){:py}`。\n- 如果问题是“排列字符串 `abc{:.str}` 的所有可能顺序”，解空间是所有排列：`abc, acb, bac, bca, cab, cba{:.str}`。\n\n### **生成所有可能的解**\n- 使用循环、递归或组合工具生成解空间。\n- 常见的生成方法：\n  - **单层循环**：用于简单的线性枚举。\n  - **多层嵌套循环**：用于枚举多维解空间。\n  - **递归**：用于生成排列、组合等复杂解空间。\n  - **工具库**：如 Python 的 `itertools`。\n\n**示例**：\n- **单层循环**：\n  ```python\n  for i in range(1, 5):  # 枚举 1 到 4\n      print(i)\n  ```\n\n- **多层嵌套循环**：\n  ```python\n  for i in range(1, 4):  # 第一层\n      for j in range(1, 4):  # 第二层\n          print(i, j)  # 枚举所有 (i, j) 对\n  ```\n\n- **递归生成排列**：\n  ```python\n  def permute(nums, path=[]):\n      if not nums:\n          print(path)  # 输出一个排列\n          return\n      for i in range(len(nums)):\n          permute(nums[:i] + nums[i+1:], path + [nums[i]])\n\n  permute([1, 2, 3])  # 输出 [1, 2, 3] 的所有排列\n  ```\n\n- **使用工具库**：\n  ```python\n  from itertools import permutations\n\n  for p in permutations([1, 2, 3]):\n      print(p)  # 输出 [1, 2, 3] 的所有排列\n  ```\n\n---\n\n### **验证解是否满足条件**\n- 对每个生成的解，验证它是否满足题目要求。\n- 验证逻辑通常是一个条件判断（`if` 语句）。\n\n**示例**：\n- 验证一个数是否是偶数：\n  ```python\n  for i in range(1, 10):\n      if i % 2 == 0:  # 验证是否是偶数\n          print(i)\n  ```\n\n- 验证一个排列是否满足特定条件：\n  ```python\n  from itertools import permutations\n\n  for p in permutations([1, 2, 3]):\n      if p[0] < p[1]:  # 验证第一个数小于第二个数\n          print(p)\n  ```\n\n---\n\n### **优化暴力枚举**\n暴力枚举的核心问题是**效率低**，尤其是当解空间很大时。因此，学习暴力枚举时，也需要掌握一些优化技巧：\n- **剪枝**：在生成解的过程中，提前排除不可能的解。\n  ```python\n  for i in range(1, 10):\n      if i % 2 != 0:  # 剪枝：跳过奇数\n          continue\n      print(i)\n  ```\n\n- **提前终止**：如果找到一个解就可以结束枚举，则不需要继续。\n  ```python\n  for i in range(1, 10):\n      if i == 5:  # 找到解后终止\n          print(\"Found:\", i)\n          break\n  ```\n\n- **减少嵌套循环**：通过数学公式或逻辑简化枚举过程。\n\n## 学习暴力枚举的练习题\n\n### **简单枚举**\n- **题目**：枚举 1 到 100 中所有的偶数。\n  ```python\n  for i in range(1, 101):\n      if i % 2 == 0:\n          print(i)\n  ```\n\n### **多层枚举**\n- **题目**：枚举所有两位数的组合。\n  ```python\n  for i in range(10, 100):\n      for j in range(10, 100):\n          print(i, j)\n  ```\n\n### **排列与组合**\n- **题目**：生成数组 `[1, 2, 3]` 的所有排列。\n  ```python\n  from itertools import permutations\n\n  for p in permutations([1, 2, 3]):\n      print(p)\n  ```\n\n### **验证条件**\n- **题目**：从数组 `[1, 2, 3, 4]` 中选择两个数，要求它们的和为 5。\n  ```python\n  for i in range(1, 5):\n      for j in range(i + 1, 5):\n          if i + j == 5:\n              print(i, j)\n  ```\n\n### **复杂枚举**\n- **题目**：生成长度为 3 的二进制字符串。\n  ```python\n  for i in range(2):\n      for j in range(2):\n          for k in range(2):\n              print(f\"{i}{j}{k}\")\n  ```\n\n## 学习暴力枚举的资源\n\n1. **书籍**：\n   - 《算法导论》（Introduction to Algorithms）—— Thomas H. Cormen\n   - 《编程之美》—— Microsoft Research\n\n2. **在线平台**：\n   - **LeetCode**：从简单题目开始，逐步挑战更复杂的题目。\n   - **HackerRank**：适合练习基础算法和枚举问题。\n   - **Codeforces**：适合练习竞赛题目。\n\n3. **工具**：\n   - 使用 Python 的 `itertools` 库简化排列和组合的生成。\n   - 使用可视化工具（如 [VisuAlgo](https://visualgo.net/)）帮助理解枚举过程。\n\n## 学习路径建议\n\n1. **从简单问题开始**：\n   - 练习单层循环和多层循环的枚举。\n   - 理解如何生成解空间。\n\n2. **逐步增加复杂度**：\n   - 学习排列、组合的生成方法。\n   - 练习验证条件的逻辑。\n\n3. **优化暴力枚举**：\n   - 学习剪枝和提前终止的技巧。\n   - 理解如何减少不必要的计算。\n\n4. **结合实际问题**：\n   - 在实际问题中应用暴力枚举，逐步积累经验。\n\n## 总结\n\n暴力枚举是算法学习的基础，掌握它可以帮助你更好地理解问题和验证复杂算法。学习暴力枚举的关键是：\n1. **理解解空间**：明确所有可能的解。\n2. **生成解空间**：使用循环、递归或工具库生成解。\n3. **验证解**：逐一验证每个解是否满足条件。\n4. **优化枚举**：通过剪枝和提前终止提高效率。\n\n通过不断练习和总结，你会发现暴力枚举不仅简单，而且非常实用。如果你有具体的题目或问题，可以随时告诉我，我会帮助你分析和解答！\n\n## 例题\n\n[LeetCode 1. 两数之和](https://leetcode-cn.com/problems/two-sum/description/) \n\n给定一个整数数组 `nums` 和一个整数目标值 `target` ,请你在该数组中找出 和为目标值 `target`  的那 两个 整数，并返回它们的数组下标。 <br/>\n你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。<br/>\n你可以按任意顺序返回答案。<br/>\n\n**示例 1:**<br/>\n**输入:** `nums = [2,7,11,15], target = 9{:py}`<br/>\n**输出:** `[0,1]`<br/>\n**解释:** 因为 `nums[0] + nums[1] == 9{:py}` ，返回 `[0, 1]{:py}` 。<br/>\n\n**示例 2:**<br/>\n**输入:** `nums = [3,2,4], target = 6{:py}`<br/>\n**输出:** `[1,2]`<br/>\n\n**示例 3:**<br/>\n**输入:** `nums = [3,3], target = 6{:py}`<br/>\n**输出:** `[0,1]{:py}`<br/>\n\n**提示:**\n- $2 \\leq nums.length \\leq 10^4$\n- $-10^9 \\leq nums[i] \\leq 10^9$\n- $-10^9 \\leq target \\leq 10^9$\n- 只会存在一个有效答案<br/>\n\n**进阶:** 你可以想出一个时间复杂度小于 $O(n^2)$ 的算法吗？\n\n### 解法1: 穷举解空间\n1. 两层循环遍历数组，找到和为目标值的两个数。\n```py\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    n = len(nums)\n    for i in range(n):\n        for j in range(n): # 注意到这里没有排除 i==j 的情况, 例如 [3, 3], 6 会导致结构为 [0, 0]\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n```\n> [!bug]\n> 这个写法是错误的, 因为没有排除 `i==j` 的情况, 例如 `[3, 3], 6` 会导致结果为 `[0, 0]`\n\n**修复:**\n```py\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    n = len(nums)\n    for i in range(n):\n        for j in range(n):\n            if i == j: # 排除 i==j 的情况\n                continue\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n```\n> [!success]\n> 这样就能得到正确答案啦 :), 但是时间复杂度是 $O(n^2)$ 的数量级, 因为我们需要遍历两遍数组\n### 解法2: 减少搜索空间(剪枝思想)+穷举\n**注意到:**\n例如: `[2, 7, 11], 9`, 我们最多会比较 $n\\times n$次, 实际上最多只需要比较: `2 + 7`, `2 + 11`, `7 + 11`, 即$\\frac{n^2-n}{2}$次, 写成矩阵(表格):\n```math\n\\begin{bmatrix}\n0 & 2 & 7 & 11 \\\\\n2 & 2+2 & 2+7 & 2+11 \\\\\n7 & 7+2 & 7+7 & 7+11 \\\\\n11 & 11+2 & 11+7 & 11+11 \\\\\n\\end{bmatrix}\n```\n> [!INFO]\n> 1. 如下证明可以参考: [等差数列求和](https://zh.wikipedia.org/wiki/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C) <br/>\n> $$\n> \\frac{n^2-n}{2}=\\sum_{i=1}^{n-1}i=1+2+3+...+(n-1)=\\frac{n(n-1)}{2}\n> $$ \n> 2. 我这里写了矩阵这个术语不要感到意外, 此处仅是用来展示一个表格, 不是用来运算\n\n  \n如果我们直接遍历两遍, 相当于计算(判断)了9次, 实际上我们只需要又上小角落或左下角落的三个元素, 所以我们可以优化一下:\n```py\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n): # 优化: 从 i+1 开始\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n```\n这样我们相当于只计算了:\n```math\n\\begin{bmatrix}\n0 & 2 & 7 & 11 \\\\\n2 &  & 2+7 & 2+11 \\\\\n7 &  &  & 7+11 \\\\\n11 &  &  &  \\\\\n\\end{bmatrix}\n```\n至此, 时间复杂度仍然是 $O(n^2)$ 的数量级, 只是比原来的大概少了$\\frac{n^2+n}{2}$ (可以明显看到), 大概是因为 如果找到了答案, 就不会继续遍历了, 因此 都不会是完整的遍历, 不会刚好少了这么多\n\n对于这个方法的另外一个写法:\n```py\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    n = len(nums)\n    for i in range(n):\n        y = target - nums[i]\n        if y in nums[i+1:]:\n            return [i, nums.index(y, i+1)]\n    return []\n```\n> [!warning]\n> 这个另外一个写法, 并不会降低时间复杂度, 甚至会增加时间复杂度, 因为 `in` 和 `index` 都是 $O(n)$ 的时间复杂度, 所以这个写法的时间复杂度是 $O(n^2)$\n\n### 解法3: 记录前缀信息(前缀和思想)+哈希表\n\n从上面的解法我们可以想到: 如果我们将已经遍历过的数字和对应的索引作为值存储到一个字典中, 那么我们在遍历的时候, 可以直接判断 `target - nums[i]` 是否在字典中, 如果在, 那么我们就找到了答案, 这样我们就可以将时间复杂度降低到 $O(n)$\n> [!tip]\n> 1. 字典的 `in` 和 `get` 方法的时间复杂度是 $O(1)$, `get`也可以用类似列表获取索引那样使用dict[key] 这种语法\n> 2. 关于字典的定义(设计): 我们把 数组中的数字 作为key, 索引作为 value, 是因为 我们需要直接比较 是否有符合的数字, 且当符合时, 需要返回索引, 故这个设计是合理的\n```py\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    hashmap = {} # key: 数字, value: 索引\n    for i, num in enumerate(nums):\n        if target - num in hashmap: # 判断是否有符合的数字, O(1)\n            return [hashmap[target - num], i] # 通过key拿到value, O(1)\n        hashmap[num] = i\n    return []\n```\n\n",
  "toc": [
    {
      "depth": 2,
      "value": "什么是暴力枚举？",
      "slug": "什么是暴力枚举？"
    },
    {
      "depth": 2,
      "value": "学习暴力枚举的步骤",
      "slug": "学习暴力枚举的步骤"
    },
    {
      "depth": 3,
      "value": "理解问题的解空间",
      "slug": "理解问题的解空间"
    },
    {
      "depth": 3,
      "value": "生成所有可能的解",
      "slug": "生成所有可能的解"
    },
    {
      "depth": 3,
      "value": "验证解是否满足条件",
      "slug": "验证解是否满足条件"
    },
    {
      "depth": 3,
      "value": "优化暴力枚举",
      "slug": "优化暴力枚举"
    },
    {
      "depth": 2,
      "value": "学习暴力枚举的练习题",
      "slug": "学习暴力枚举的练习题"
    },
    {
      "depth": 3,
      "value": "简单枚举",
      "slug": "简单枚举"
    },
    {
      "depth": 3,
      "value": "多层枚举",
      "slug": "多层枚举"
    },
    {
      "depth": 3,
      "value": "排列与组合",
      "slug": "排列与组合"
    },
    {
      "depth": 3,
      "value": "验证条件",
      "slug": "验证条件"
    },
    {
      "depth": 3,
      "value": "复杂枚举",
      "slug": "复杂枚举"
    },
    {
      "depth": 2,
      "value": "学习暴力枚举的资源",
      "slug": "学习暴力枚举的资源"
    },
    {
      "depth": 2,
      "value": "学习路径建议",
      "slug": "学习路径建议"
    },
    {
      "depth": 2,
      "value": "总结",
      "slug": "总结"
    },
    {
      "depth": 2,
      "value": "例题",
      "slug": "例题"
    },
    {
      "depth": 3,
      "value": "解法1: 穷举解空间",
      "slug": "解法1:-穷举解空间"
    },
    {
      "depth": 3,
      "value": "解法2: 减少搜索空间(剪枝思想)+穷举",
      "slug": "解法2:-减少搜索空间(剪枝思想)+穷举"
    },
    {
      "depth": 3,
      "value": "解法3: 记录前缀信息(前缀和思想)+哈希表",
      "slug": "解法3:-记录前缀信息(前缀和思想)+哈希表"
    }
  ]
}