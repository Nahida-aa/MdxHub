{
  "locale": "zh",
  "type": "docs",
  "url": "/zh/docs/alg/bisect",
  "slug": "alg/bisect",
  "segments": [
    "alg",
    "bisect"
  ],
  "filePath": "docs/zh/alg/bisect/index.mdx",
  "meta": {
    "title": "bisect",
    "description": "二分查找是一种高效的查找算法，适用于有序数组或列表。它的核心思想是通过比较中间元素和目标值的大小，缩小查找范围，直到找到目标值或范围为空。",
    "created_at": "2025-03-25T04:40:00.000Z",
    "updated_at": "2025-03-25T04:40:00.000Z",
    "tags": [
      "alg",
      "bisect"
    ]
  },
  "order": 99,
  "content": "\n- **目标**: 掌握二分查找的思想和变种\n- **学习内容**:\n  1. 标准二分查找\n  2. 二分查找的变种（如查找左边界、右边界）, 二分查找变形问题\n  3. 二分查找的应用: 有序数组查找, 最优解的范围搜索, 查找边界, 旋转数组查找\n- **推荐题目**:\n  - [LeetCode 704. 二分查找](https://leetcode-cn.com/problems/binary-search/description/) (基础二分查找)\n  - [LeetCode 69. x 的平方根](https://leetcode-cn.com/problems/sqrtx/description/) (二分查找)\n  - [LeetCode 34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/) (变种二分)\n  - [LeetCode 153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/) (二分查找)\n  - [LeetCode 33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/) (二分查找)\n  - [LeetCode 4. 寻找两个正序数组的中位数](https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/) (二分查找)\n\n## python 自带的二分查找库\n```py\ndef bisect( \n    a, # 给定一个升序数组\n    x, # 目标值\n    lo:int=0,\n    hi:int | None = None\n  ): # 返回第一个大于目标值的索引 在 a[lo:hi] 里\n  ...\n# 时间复杂度: O(logn)\nfrom bisect import bisect\n\na = [1,9,9,9,200,500]\nprint(bisect(a, 3)) # 1，a[1] = 9\nprint(bisect(a, 9)) # 4，a[4] = 200\nprint(bisect(a, -1)) # 0，a[0] = 1\nprint(bisect(a, 1000)) # 6，a[6]: error\n\na.reverse() # [500, 200, 9, 9, 9, 1]\n# 找到第一个小于 x 的索引\na_rev_ = [-i for i in a] # [-500, -200, -9, -9, -9, -1]\nprint(bisect(a_rev_, -3)) # 5，a_[5] = -1\nprint(bisect(a_rev_, -9)) # 5，a_[5] = -1\nprint(bisect(a_rev_, -1)) # 6，a_[6]: err\nprint(bisect(a_rev_, -1000)) # 0，a_[0] = -500\n```\n\n## 例题\n\n[洛谷 P2249 【深基13.例1】查找](https://www.luogu.com.cn/problem/P2249)\n\n### 题目描述\n\n输入 $n$ 个不超过 $10^9$ 的单调不减的（就是后面的数字不小于前面的数字）非负整数 $a_1,a_2,\\dots,a_{n}$，然后进行 $m$ 次询问。对于每次询问，给出一个整数 $q$，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 $-1$ 。\n\n### 输入格式\n\n第一行 $2$ 个整数 $n$ 和 $m$，表示数字个数和询问次数。\n\n第二行 $n$ 个整数，表示这些待查询的数字。\n\n第三行 $m$ 个整数，表示询问这些数字的编号，从 $1$ 开始编号。\n\n### 输出格式\n\n输出一行，$m$ 个整数，以空格隔开，表示答案。\n\n### 输入输出样例\n\n#### 输入\n\n```\n11 3\n1 3 3 3 5 7 9 11 13 15 15\n1 3 6\n```\n\n#### 输出\n\n```\n1 2 -1\n```\n\n### 说明/提示\n\n数据保证，$1 \\leq n \\leq 10^6$，$0 \\leq a_i,q \\leq 10^9$，$1 \\leq m \\leq 10^5$\n\n本题输入输出量较大，请使用较快的 IO 方式。\n\n### 题解\n\n#### 获得输入\n```py\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nn, m = map(int, input().split())\na_ls = list(map(int, input().split()))\nq_ls = list(map(int, input().split()))\n```\n\n#### 方法一: 二分查找\n```py\nfrom bisect import bisect\nfrom typing import List\ndef m1(n:int, m:int, a_ls:List[int], q_ls:List[int]) -> List[int]:\n  s = set(a_ls)\n  res = []\n  for q in q_ls:\n    if q in s:\n      res.append(bisect(a_ls, q-1)+1)# + 1是因为题目的输出是从1开始编号\n    else:\n      res.append(-1)\n  return res\nprint(*m1(n, m, a_ls, q_ls))\n```\n\n## 实战题:2563\n\n[LeetCode 2563. 统计公平对数目](https://leetcode-cn.com/problems/count-the-number-of-fair-pairs/description/)\n\n给你一个下标从 0 开始、长度为 `n` 的整数数组 `nums` 和两个整数 `lower` 和 `upper`, 返回**公平数对的数目**。\n如果 `(i, j)` 满足以下情况, 则认为它是一个**公平数对**:\n- `0 <= i < j < n`且\n- `lower <= nums[i] + nums[j] <= upper`\n**示例 1:**\n> 输入: nums = [0,1,7,4,4,5], lower = 3, upper = 6\n> 输出: 6\n> 解释: 共计 6 个公平数对: (0,3), (0,4), (0,5), (1,3), (1,4), (1,5)。\n**示例 2:**\n> 输入: nums = [1,7,9,2,5], lower = 11, upper = 11\n> 输出: 1\n> 解释: 共计 1 个公平数对: (2,3)。\n**提示:**\n- `1 <= nums.length <= 10^5`\n- `nums.length == n`\n- `-10^9 <= nums[i] <= 10^9`\n- `-10^9 <= lower <= upper <= 10^9`\n\n### 方法一: 枚举\n```py\ndef countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n  res = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if lower <= nums[i] + nums[j] <= upper:\n        res += 1\n  return res\n```\n### 方法二: 二分查找\n- 注意到排序不影响结果(总数)\n- 对 `lower <= nums[i] + nums[j] <= upper` 进行变形，得到 `lower - nums[i] <= nums[j] <= upper - nums[i]`，\n- 即对于每个 `i`，找到 `nums[j]` 在 `[lower - nums[i], upper - nums[i]]` 之间的个数。\n- `j` 的范围是 `[i+1, n)`，所以可以对 `nums` 进行排序，然后对于每个 `i`, 在 `j`的范围中，找到 `lower - nums[i]` 和 `upper - nums[i]` 的位置，然后计算这两个位置之间的个数。\n```py\nfrom bisect import bisect\n\ndef countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n  res = 0\n  nums.sort()\n  for i in range(len(nums)):\n    L = bisect(nums, lower - nums[i]-1, i+1)\n    R = bisect(nums, upper - nums[i], i+1)-1\n    res += R - L + 1 # 索引做差+1 得到之间的个数, 对于前后都是闭区间\n  return res\n```\n\n## 自己实现二分查找\npython3.12 给 `bisect` 增加了 参数 `key: func`, 但是 python3.8 只有4个参数: `a, x, lo=0, hi=None`,\n\n因此需要学会自己实现二分查找, 以应对更多的情况\n\n**实现思路:**\n1. 对于区间 `[lo, hi)`, 划分为 `[lo, mid)` 和 `[mid, hi)`, `mid = (lo + hi) >> 1{:py}`\n2. `if x < a[mid]: hi = mid{:py}`, `else: lo = mid+1{:py}`\n3. 重复步骤1,2 直到 `lo == hi`\n\n```py\ndef bisect(a, x, lo=0, hi=None, key=lambda f: f):\n  if hi is None: hi = len(a)\n  while lo < hi:\n    mid = (lo + hi) >> 1\n    if x < key(a[mid]): hi = mid # 补上未来版本的 key\n    else: lo = mid + 1\n  return lo\n```\n\n## leetCode 2226\n\n[LeetCode 2226. 每个小孩最多能分到多少糖果](https://leetcode-cn.com/problems/maximum-candies-allocated-to-k-children/description/)\n\n给你一个 **下标从 0 开始** 的整数数组 `candies` 。数组中的每个元素表示大小为 `candies[i]` 的一堆糖果。你可以将每堆糖果分成任意数量的 **子堆** ，但 **无法** 再将两堆合并到一起。\n\n另给你一个整数 k 。你需要将这些糖果分配给 k 个小孩，使每个小孩分到 **相同** 数量的糖果。每个小孩可以拿走 **至多一堆** 糖果，有些糖果可能会不被分配。\n\n返回每个小孩可以拿走的 **最大糖果数目** 。\n\n**示例 1:**\n> 输入: `candies = [5,8,6], k = 3`\n> 输出: `5`\n> 解释: 可以将 `candies[1]` 分成大小分别为 5 和 3 的两堆，然后把 `candies[2]` 分成大小分别为 5 和 1 的两堆。现在就有五堆大小分别为 5、5、3、5 和 1 的糖果。可以把 3 堆大小为 5 的糖果分给 3 个小孩。可以证明无法让每个小孩得到超过 5 颗糖果。\n**示例 2:**\n> 输入: `candies = [2,5], k = 11`\n> 输出: `0`\n> 解释: 总共有 11 个小孩，但只有 7 颗糖果，但如果要分配糖果的话，必须保证每个小孩至少能得到 1 颗糖果。因此，最后每个小孩都没有得到糖果，答案是 0 。\n**示例 3:**\n- `1 <= candies.length <= 10^5`\n- `1 <= candies[i] <= 10^7`\n- `1 <= k <= 10^12`\n\n题解:\n```py\n# 可知问题解一定在 [0, max(candies)] 之间\n# 答案就是寻找有多个 能被 res 整除的数 在[0, max(candies)] 之间\n# def bisect(x,lo=0,hi=None,key=lambda f: f):\n# #   if hi is None: hi = len(a)\n#   while lo < hi:\n#     mid = (lo + hi) >> 1\n#     if x > key(mid): hi = mid\n#     else: lo = mid + 1\n#   return lo\n\nclass Solution:\n    def maximumCandies(self, candies: List[int], k: int) -> int:\n        tot = sum(candies)\n        r = tot//k\n        if r==1: return 1\n        elif tot<k: return 0\n        lo = 1\n        hi = 10**12+10\n        key = lambda x: sum([i//x for i in candies])\n        while lo < hi:\n            mid = (lo + hi) >> 1\n            if k > key(mid): hi = mid\n            else: lo = mid + 1\n        return lo - 1\n        # res = bisect(k, lo=1, hi=max(candies)+1, key=)\n        # return res -1\n```\n\n## lanqiao 3.冶炼金属\n\nhttps://www.lanqiao.cn/problems/3510/learning/?page=1&first_category_id=1&second_category_id=3&tags=%E4%BA%8C%E5%88%86,%E7%9C%81%E8%B5%9B&tag_relation=intersection&difficulty=20\n\n小蓝有一个神奇的炉子用于将普通金属 O 冶炼成为一种特殊金属 X。这个炉子有一个称作转换率的属性 V，V 是一个正整数，这意味着消耗 V 个普通金属 O 恰好可以冶炼出一个特殊金属 X，当普通金属 O 的数目不足 V 时，无法继续冶炼。\n\n现在给出了 N 条冶炼记录，每条记录中包含两个整数 A 和 B，这表示本次投入了 A 个普通金属 O，最终冶炼出了 B 个特殊金属 X。每条记录都是独立的，这意味着上一次没消耗完的普通金属 O 不会累加到下一次的冶炼当中。\n\n根据这 N 条冶炼记录，请你推测出转换率 V 的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。",
  "toc": [
    {
      "depth": 2,
      "value": "python 自带的二分查找库",
      "slug": "python-自带的二分查找库"
    },
    {
      "depth": 2,
      "value": "例题",
      "slug": "例题"
    },
    {
      "depth": 3,
      "value": "题目描述",
      "slug": "题目描述"
    },
    {
      "depth": 3,
      "value": "输入格式",
      "slug": "输入格式"
    },
    {
      "depth": 3,
      "value": "输出格式",
      "slug": "输出格式"
    },
    {
      "depth": 3,
      "value": "输入输出样例",
      "slug": "输入输出样例"
    },
    {
      "depth": 4,
      "value": "输入",
      "slug": "输入"
    },
    {
      "depth": 4,
      "value": "输出",
      "slug": "输出"
    },
    {
      "depth": 3,
      "value": "说明/提示",
      "slug": "说明/提示"
    },
    {
      "depth": 3,
      "value": "题解",
      "slug": "题解"
    },
    {
      "depth": 4,
      "value": "获得输入",
      "slug": "获得输入"
    },
    {
      "depth": 4,
      "value": "方法一: 二分查找",
      "slug": "方法一:-二分查找"
    },
    {
      "depth": 2,
      "value": "实战题:2563",
      "slug": "实战题:2563"
    },
    {
      "depth": 3,
      "value": "方法一: 枚举",
      "slug": "方法一:-枚举"
    },
    {
      "depth": 3,
      "value": "方法二: 二分查找",
      "slug": "方法二:-二分查找"
    },
    {
      "depth": 2,
      "value": "自己实现二分查找",
      "slug": "自己实现二分查找"
    },
    {
      "depth": 2,
      "value": "leetCode 2226",
      "slug": "leetcode-2226"
    },
    {
      "depth": 2,
      "value": "lanqiao 3.冶炼金属",
      "slug": "lanqiao-3.冶炼金属"
    }
  ]
}