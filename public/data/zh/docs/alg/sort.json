{
  "locale": "zh",
  "type": "docs",
  "url": "/zh/docs/alg/sort",
  "slug": "alg/sort",
  "segments": [
    "alg",
    "sort"
  ],
  "filePath": "docs/zh/alg/sort/index.mdx",
  "meta": {
    "title": "排序",
    "description": null,
    "created_at": "2025-03-24T15:40:14.000Z",
    "updated_at": "2025-03-24T15:40:14.000Z",
    "tags": [
      "alg",
      "sort"
    ]
  },
  "order": 99,
  "content": "\n## 冒泡排序\n**算法思想**\n- 冒泡排序通过**相邻元素的比较和交换**，将较大的元素逐步“冒泡”到数组的末尾\n- 每一轮都会将当前未排序部分的最大（或最小）元素放到正确的位置\n\n**实现步骤**:\n```py\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1): # 从数组的第一个元素到未排序的位置 -1, 因为最后一个元素没有下一位或者下一位是有序的，依次比较相邻的两个元素\n            if arr[j] > arr[j+1]: # 如果前一个元素大于后一个元素，则交换两个元素\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n        # 例如遍历一遍后, 最后一个元素就是最大的元素, 下一次遍历就不需要比较最后一个元素\n        # 遍历两次后, 最后两个元素就是最大的两个元素, 下一次遍历就不需要比较最后两个元素\n    return arr\n```\n## 选择排序\n交换次数比冒泡排序少，但是比较次数一样多\n\n**算法思想**:\n- 选择排序每次从未排序的部分**选择最小（或最大）的元素**，放到未排序部分的起始位置\n**实现步骤**:\n```py\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n): # 从未排序的部分选择最小的元素\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n```\n\n## 题例 LeetCode 406. 根据身高重建队列\n\n- 406.根据身高重建队列 - 力扣 (LeetCode) - https://leetcode.cn/problems/queue-reconstruction-by-height/description/\n\n### 题目描述\n\n假设有打乱顺序的一群人站成一个队列，数组 `people` 表示队列中一些人的属性（不一定按顺序）。每个 $people[i] = [h_i, k_i]$ 表示第 `i` 个人的身高为 $h_i$ ，前面 **正好** 有 $k_i$ 个身高大于或等于 $h_i$ 的人。\n\n请你重新构造并返回输入数组 `people` 所表示的队列。返回的队列应该格式化为数组 `queue` ，其中 $queue[j] = [h_j, k_j]$ 是队列中第 `j` 个人的属性 (`queue[0]{:py}` 是排在队列前面的人)。\n\n### 输入输出样例\n\n1. 示例 1:\n```\n输入: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n解释：\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n```\n2. 示例 2:\n```\n输入: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n```\n### 提示：\n\n- $1 ≤ people.length ≤ 2000$\n- $0 ≤ h_i ≤ 10^6$\n- $0 ≤ k_i < people.length$\n- 题目数据确保队列可以被重建\n\n### 分析\n\n1. 排在前面的 $k_i$ 会比较小, 而排在后面的 $k_i$ 会比较大, 因此 排在前面的 $h_i$ 需要比较大.\n2. 对于 $h_i$ 相同的情况, $k_i$ 较大的必须排在后面\n3. 对于 $k_i$ 相同的情况, 排序没有直接关系\n4. 进行 $h_i$ 的降序排序, 对于 $h_i$ 相同的情况, 对 $k_i$ 升序排序后, 进行插入操作, 来保证\n\n#### 做法\n\n```py\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nfrom typing import List\n\npeople: List[List[int]] = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n# 1. 先对 h_i 降序排序, 对于 h_i 相同的情况, 对 k_i 升序排序\npeople.sort(key=lambda x: (-x[0], x[1]))\n# 2. \nres = []\nfor i,v in enumerate(people):\n   h, k = v[0], v[1]\n   if k >= len(res):\n       res.append(v) # 这样虽然不能保证满足要求, 但是题目说了是数据是来自正确的队列, 打乱后的, 因为等其他插入完成后, 最终就能还原了\n   else:\n       res.insert(k, v) # 插入到 k 的位置, 这样前面就有 k 个大于等于 h 的元素\nprint(res)\n```\n\n```go\npeople := []string{\"Alice\", \"Bob\", \"Charlie\"}\nfor i, v := range people {\n    fmt.Println(i, v)\n}\n```",
  "toc": [
    {
      "depth": 2,
      "value": "冒泡排序",
      "slug": "冒泡排序"
    },
    {
      "depth": 2,
      "value": "选择排序",
      "slug": "选择排序"
    },
    {
      "depth": 2,
      "value": "题例 LeetCode 406. 根据身高重建队列",
      "slug": "题例-leetcode-406.-根据身高重建队列"
    },
    {
      "depth": 3,
      "value": "题目描述",
      "slug": "题目描述"
    },
    {
      "depth": 3,
      "value": "输入输出样例",
      "slug": "输入输出样例"
    },
    {
      "depth": 3,
      "value": "提示：",
      "slug": "提示："
    },
    {
      "depth": 3,
      "value": "分析",
      "slug": "分析"
    },
    {
      "depth": 4,
      "value": "做法",
      "slug": "做法"
    }
  ]
}