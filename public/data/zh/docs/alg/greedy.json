{
  "locale": "zh",
  "type": "docs",
  "url": "/zh/docs/alg/greedy",
  "slug": "alg/greedy",
  "segments": [
    "alg",
    "greedy"
  ],
  "filePath": "docs/zh/alg/greedy/index.mdx",
  "meta": {
    "title": "贪心算法",
    "description": "贪心算法（Greedy Algorithm）是一种在每一步选择中都做出局部最优解的算法. 它的核心思想是通过局部最优解，尝试得到全局最优解. 简单高效，适合某些特定问题. 需要证明贪心选择的正确性",
    "created_at": "2025-03-23T22:32:27.000Z",
    "updated_at": "2025-03-23T22:32:27.000Z",
    "tags": [
      "greedy",
      "alg"
    ]
  },
  "order": 99,
  "content": "\n## 为什么学习贪心算法？\n\n## 例题\n\n### 2024_CA_省C.训练士兵\n\n- P10387 [蓝桥杯 2024 省 A] 训练士兵 - https://www.luogu.com.cn/problem/P10387\n\n#### 题目描述\n\n有 $n$ 名士兵，这些士兵需要接受一系列特殊的训练，以提升他们的战斗技能。对于第 $i$ 名士兵来说，进行一次训练所需的成本为 $p_i$ 枚金币，而要想成为顶尖战士，他至少需要进行 $c_i$ 次训练。  \n为了确保训练的高效性，王国推出了一种组团训练的方案。该方案包含每位士兵所需的一次训练，且总共只需支付 $S$ 枚金币（组团训练方案可以多次购买，即士兵可以进行多次组团训练）。  \n作为训练指挥官，请你计算出最少需要花费多少金币，才能使得所有的士兵都成为顶尖战士？\n\n#### 输入格式\n\n输入的第一行包含两个整数 $n$ 和 $S$，用一个空格分隔，表示士兵的数量和进行一次组团训练所需的金币数。  \n接下来的 $n$ 行，每行包含两个整数 $p_i$ 和 $c_i$，用一个空格分隔，表示第 $i$ 名士兵进行一次训练的金币成本和要成为顶尖战士所需的训练次数。\n\n#### 输出格式\n\n输出一行包含一个整数，表示使所有士兵成为顶尖战士所需的最少金币数。\n\n#### 输入输出样例\n\n##### 输入\n\n```\n3 6\n5 2\n2 4\n3 2\n```\n\n##### 输出\n\n```\n16\n```\n\n#### 说明/提示\n\n花费金币最少的训练方式为：进行 $2$ 次组团训练，花费 $2 × 6 = 12$ 枚金币，此时士兵 $1, 3$ 已成为顶尖战士；再花费 $4$ 枚金币，让士兵 $2$ 进行两次训练，成为顶尖战士。总花费为 $12 + 4 = 16$。\n\n对于 $40\\%$ 的评测用例，$1 ≤ n ≤ 10^3，1 ≤ p_i\n, c_i ≤ 10^5，1 ≤ S ≤ 10^7$。\n\n对于所有评测用例，$1 ≤ n ≤ 10^5，1 ≤ p_i\n, c_i ≤ 10^6，1 ≤ S ≤ 10^{10}$。\n\n#### 思路\n\n- 按照需要训练的次数 $c_i$ 升序排序\n- 维护一个动态的 $cnt$, 表示已经组团训练的次数\n- 维护一个动态的 $tot$, 表示当前训练所有士兵一次的总成本, 用于和 $S$ 比较\n- 初始化总花费 $res:=0$, 遍历一遍 n, 表示按照 $c_i$ 的顺序训练士兵时, 选择组团训练还是单独训练\n  - 如果 $S \\leq tot$, 表示当前组团训练比单独训练剩下的士兵要便宜\n    - 则选择组团训练 $c_i-cnt$ 次, $res := res + (c_i-cnt) \\times S$\n    - 并更新 $cnt:=c_i$\n  - 否则, 表示当前训练所有士兵一次的总成本大于 $S$, 则选择单独训练\n    - 则单独将这个人训练 $c_i$ 次, $res := res + (c_i-cnt) \\times p_i$\n  - 这次迭代结束说明 第 $i$ 个士兵训练完成, 更新 $tot$\n    - $tot := tot - p_i$\n#### 代码示例: \n```py\n# 获得输入\nn, S = map(int, input().split())\nmatrix_p_c = [[0,0]] * n\nfor i in range(n):\n    matrix_p_c[i] = list(map(int, input().split()))\n# 按照需要训练的次数 $c_i$ 从升序排序\np, c = [0] * n, [0] * n\nmatrix_p_c.sort(key=lambda x: x[1])\nfor i in range(n):\n    p[i], c[i] = matrix_p_c[i][0], matrix_p_c[i][1]\n# 初始化\nres, cnt, tot = 0, 0, sum(p)\n# 遍历\nfor i in range(n):\n    if S <= tot:\n        res += (c[i] - cnt) * S\n        cnt = c[i]\n    else:\n        res += (c[i] - cnt) * p[i]\n    tot -= p[i]\nprint(res)\n```",
  "toc": [
    {
      "depth": 2,
      "value": "为什么学习贪心算法？",
      "slug": "为什么学习贪心算法？"
    },
    {
      "depth": 2,
      "value": "例题",
      "slug": "例题"
    },
    {
      "depth": 3,
      "value": "2024_CA_省C.训练士兵",
      "slug": "2024_ca_省c.训练士兵"
    },
    {
      "depth": 4,
      "value": "题目描述",
      "slug": "题目描述"
    },
    {
      "depth": 4,
      "value": "输入格式",
      "slug": "输入格式"
    },
    {
      "depth": 4,
      "value": "输出格式",
      "slug": "输出格式"
    },
    {
      "depth": 4,
      "value": "输入输出样例",
      "slug": "输入输出样例"
    },
    {
      "depth": 5,
      "value": "输入",
      "slug": "输入"
    },
    {
      "depth": 5,
      "value": "输出",
      "slug": "输出"
    },
    {
      "depth": 4,
      "value": "说明/提示",
      "slug": "说明/提示"
    },
    {
      "depth": 4,
      "value": "思路",
      "slug": "思路"
    },
    {
      "depth": 4,
      "value": "代码示例:",
      "slug": "代码示例:"
    }
  ]
}